module spi_master (
    input wire clk,           // System clock
    input wire reset,         // Reset signal
    input wire [7:0] tx_data, // Data to transmit
    input wire start_tx,      // Start transmission
    output reg [7:0] rx_data, // Received data
    output reg tx_done,       // Transmission complete
    output reg sclk,          // SPI clock
    output reg mosi,          // Master out slave in
    input wire miso,          // Master in slave out
    output reg ss             // Slave select
);

parameter IDLE = 2'b00, TRANSMIT = 2'b01, DONE = 2'b10;

reg [1:0] state;
reg [3:0] bit_count;
reg [7:0] tx_buffer;
reg [7:0] rx_buffer;
reg [7:0] clk_div_counter;

// Clock divider for SPI clock (adjust for desired speed)
parameter CLK_DIV = 100; // Adjust based on your system clock

always @(posedge clk or posedge reset) begin
    if (reset) begin
        state <= IDLE;
        sclk <= 0;
        mosi <= 0;
        ss <= 1;
        tx_done <= 0;
        bit_count <= 0;
        clk_div_counter <= 0;
    end else begin
        case (state)
            IDLE: begin
                ss <= 1;
                sclk <= 0;
                tx_done <= 0;
                if (start_tx) begin
                    tx_buffer <= tx_data;
                    bit_count <= 7;
                    state <= TRANSMIT;
                    ss <= 0;
                    clk_div_counter <= 0;
                end
            end
            
            TRANSMIT: begin
                if (clk_div_counter < CLK_DIV/2) begin
                    clk_div_counter <= clk_div_counter + 1;
                end else begin
                    clk_div_counter <= 0;
                    sclk <= ~sclk;
                    
                    if (sclk == 0) begin // Rising edge
                        mosi <= tx_buffer[bit_count];
                        rx_buffer[bit_count] <= miso;
                    end else begin // Falling edge
                        if (bit_count == 0) begin
                            state <= DONE;
                        end else begin
                            bit_count <= bit_count - 1;
                        end
                    end
                end
            end
            
            DONE: begin
                ss <= 1;
                sclk <= 0;
                rx_data <= rx_buffer;
                tx_done <= 1;
                state <= IDLE;
            end
        endcase
    end
end

endmodule