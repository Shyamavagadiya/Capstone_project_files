module fpga_spi_top (
    input wire clk_50mhz,     // 50MHz system clock
    input wire reset_n,       // Reset button (active low)
    
    // UART interface
    input wire uart_rx,
    output wire uart_tx,
    
    // SPI interface
    output wire spi_sclk,
    output wire spi_mosi,
    input wire spi_miso,
    output wire spi_ss,
    
    // Debug LEDs
    output wire [3:0] leds
);

wire reset = ~reset_n;
wire [7:0] uart_rx_data;
wire uart_rx_valid;
wire [7:0] uart_tx_data;
wire uart_tx_ready;
wire uart_tx_start;

wire [7:0] spi_tx_data;
wire [7:0] spi_rx_data;
wire spi_start;
wire spi_done;

// UART module instance
uart_controller uart_inst (
    .clk(clk_50mhz),
    .reset(reset),
    .rx(uart_rx),
    .tx(uart_tx),
    .rx_data(uart_rx_data),
    .rx_valid(uart_rx_valid),
    .tx_data(uart_tx_data),
    .tx_start(uart_tx_start),
    .tx_ready(uart_tx_ready)
);

// SPI master instance
spi_master spi_inst (
    .clk(clk_50mhz),
    .reset(reset),
    .tx_data(spi_tx_data),
    .start_tx(spi_start),
    .rx_data(spi_rx_data),
    .tx_done(spi_done),
    .sclk(spi_sclk),
    .mosi(spi_mosi),
    .miso(spi_miso),
    .ss(spi_ss)
);

// Control logic
assign spi_tx_data = uart_rx_data;
assign spi_start = uart_rx_valid;
assign uart_tx_data = spi_rx_data;
assign uart_tx_start = spi_done;

// Debug LEDs
assign leds[0] = uart_rx_valid;
assign leds[1] = spi_start;
assign leds[2] = spi_done;
assign leds[3] = uart_tx_start;

endmodule